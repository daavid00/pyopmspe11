# SPDX-FileCopyrightText: 2023 NORCE
# SPDX-License-Identifier: MIT
#!/usr/bin/env python

""""
Script to write the saturation functions
"""

import math
import numpy as np


def s_w_points(npoints):
    """
    Points to evaluate the saturation functions

    """
    return ${dic['s_w'].strip()}


def krw(s_w, swi):
    """
    Wetting relative permeability

    """
    return ${dic['krw'].strip()}


def krn(s_w, sni):
    """
    CO2 relative permeability

    """
    return ${dic['krn'].strip()}


def pcap(s_w, swi, pen, penmax):
    """
    Capillary pressure

    """
    return ${dic['pcap'].strip()}


def permporo(poro_fact, poro_crit, eta, Kbio):
    """
    Porosity-permeability relationship

    """
    return (((poro_fact - poro_crit) / (1. - poro_crit))**eta + Kbio) / (1. +  Kbio)


def safu_evaluation():
    """
    Saturation function assignation

    """

    # Properties: swi, sni, pen, penmax, npoints
    safu = [[0.0] * 5 for _ in range(${len(dic['safu'])})]
    % for i, _ in enumerate(dic['safu']):
    % for j, _ in enumerate(dic['safu'][i]):
    safu[${i}][${j}] = ${dic['safu'][i][j]}
    % endfor
    % endfor

    % if dic['model'] == 'biofilm':
    micrp = [[0.0] * 5 for _ in range(${len(dic['micrPara'])})]
    % for i, _ in enumerate(dic['micrPara']):
    % for j, _ in enumerate(dic['micrPara'][i]):
    micrp[${i}][${j}] = ${dic['micrPara'][i][j]}
    % endfor
    % endfor

    pepo = [[0.0] * 5 for _ in range(${len(dic['permPoro'])})]
    % for i, _ in enumerate(dic['permPoro']):
    % for j, _ in enumerate(dic['permPoro'][i]):
    pepo[${i}][${j}] = ${dic['permPoro'][i][j]}
    % endfor
    % endfor
    % endif

    with open(
        "${dic['exe']}/${dic['fol']}/deck/TABLES.INC",
        "w",
        encoding="utf8",
    ) as file:
        file.write("-- Copyright (C) 2023 NORCE\n")
        file.write("-- This file was generated by pyopmspe11 https://github.com/OPM/pyopmspe11\n")
        % if dic["co2store"] == "gaswater":
        file.write("SGWFN\n")
        % else:
        file.write("SGOF\n")
        % endif
        for _, para in enumerate(safu):
            s_n = 1.0 - s_w_points(para[4])
            for value in s_n:
                if 1.0 - value > para[0]:
                    file.write(
                        f"{value:E} {krn(1.0 - value, para[1]) :E}"
                        f" {krw(1.0 - value, para[0]) :E}"
                        f" {pcap(1.0 - value, para[0], para[2], para[3])/1.e5 :E} \n"
                    )
                else:
                    file.write(
                        f"{value:E} {krn(1.0 - value, para[1]) :E}"
                        f" {krw(1.0 - value, para[0]) :E}"
                        f" {para[3]/1.e5 :E} \n"
                    )
            file.write("/\n")
    % if dic['model'] == 'biofilm':
    with open(
        "${dic['exe']}/${dic['fol']}/deck/PERMPORO.INC",
        "w",
        encoding="utf8",
    ) as file:
        file.write("-- Copyright (C) 2024 NORCE\n")
        file.write("-- This file was generated by pyopmspe11 https://github.com/OPM/pyopmspe11\n")
        file.write("PERMPORO\n")
        for _, para in enumerate(pepo):
            poro_fact = np.linspace(0, 1, para[3])
            for value in poro_fact:
                if value < para[0]:
                    file.write(
                        f"{value:E} {para[2] :E}\n"
                    )
                else:
                    file.write(
                        f"{value:E} {permporo(value, para[0], para[1], para[2]) :E}\n"
                    )
            file.write("/\n")
    with open(
        "${dic['exe']}/${dic['fol']}/deck/BACTPARA.INC",
        "w",
        encoding="utf8",
    ) as file:
        file.write("-- Copyright (C) 2024 NORCE\n")
        file.write("-- This file was generated by pyopmspe11 https://github.com/OPM/pyopmspe11\n")
        file.write("BACTPARA\n")
        for _, para in enumerate(micrp):
            file.write(f"{para[0]} {para[1]} {para[2]} {para[3]} {para[4]}/\n")
    % endif


if __name__ == "__main__":
    safu_evaluation()
